# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import sva_pb2 as sva__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in sva_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SVAServiceStub(object):
    """SVA service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeVideo = channel.unary_unary(
                '/sva.SVAService/AnalyzeVideo',
                request_serializer=sva__pb2.AnalyzeVideoRequest.SerializeToString,
                response_deserializer=sva__pb2.AnalyzeVideoResponse.FromString,
                _registered_method=True)
        self.SendChatMessage = channel.unary_unary(
                '/sva.SVAService/SendChatMessage',
                request_serializer=sva__pb2.SendChatMessageRequest.SerializeToString,
                response_deserializer=sva__pb2.SendChatMessageResponse.FromString,
                _registered_method=True)
        self.GetChatHistory = channel.unary_unary(
                '/sva.SVAService/GetChatHistory',
                request_serializer=sva__pb2.GetChatHistoryRequest.SerializeToString,
                response_deserializer=sva__pb2.GetChatHistoryResponse.FromString,
                _registered_method=True)
        self.GetServerStatus = channel.unary_unary(
                '/sva.SVAService/GetServerStatus',
                request_serializer=sva__pb2.ServerStatusRequest.SerializeToString,
                response_deserializer=sva__pb2.ServerStatusResponse.FromString,
                _registered_method=True)


class SVAServiceServicer(object):
    """SVA service definition
    """

    def AnalyzeVideo(self, request, context):
        """Video analysis
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatMessage(self, request, context):
        """Chat operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChatHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerStatus(self, request, context):
        """Server status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SVAServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeVideo,
                    request_deserializer=sva__pb2.AnalyzeVideoRequest.FromString,
                    response_serializer=sva__pb2.AnalyzeVideoResponse.SerializeToString,
            ),
            'SendChatMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatMessage,
                    request_deserializer=sva__pb2.SendChatMessageRequest.FromString,
                    response_serializer=sva__pb2.SendChatMessageResponse.SerializeToString,
            ),
            'GetChatHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChatHistory,
                    request_deserializer=sva__pb2.GetChatHistoryRequest.FromString,
                    response_serializer=sva__pb2.GetChatHistoryResponse.SerializeToString,
            ),
            'GetServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerStatus,
                    request_deserializer=sva__pb2.ServerStatusRequest.FromString,
                    response_serializer=sva__pb2.ServerStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sva.SVAService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('sva.SVAService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SVAService(object):
    """SVA service definition
    """

    @staticmethod
    def AnalyzeVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sva.SVAService/AnalyzeVideo',
            sva__pb2.AnalyzeVideoRequest.SerializeToString,
            sva__pb2.AnalyzeVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendChatMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sva.SVAService/SendChatMessage',
            sva__pb2.SendChatMessageRequest.SerializeToString,
            sva__pb2.SendChatMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChatHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sva.SVAService/GetChatHistory',
            sva__pb2.GetChatHistoryRequest.SerializeToString,
            sva__pb2.GetChatHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/sva.SVAService/GetServerStatus',
            sva__pb2.ServerStatusRequest.SerializeToString,
            sva__pb2.ServerStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
